#!/usr/bin/env python
# coding: utf-8

# # Dataset Creation

# In[1]:


import os
from pyaxmlparser import APK

def process(list):
  result = []
  for i in list:
    if 'android.permission' in i:
        temp = i.split('.')
        if 'permission' in temp:
            ind = temp.index('permission')
            result.append(".".join(temp[ind:]))
  return result


# In[2]:


#Malware Files
malware_count = 0
permission_list = []

#Adware
for entry in os.scandir("C:/Users/Nusayer/Desktop/Malware/Adware"):
    try:    
        if entry.is_file():
            a = APK(entry.path)
            permission_list.append(process(a.get_permissions()))
            malware_count += 1        
    except:
        print(entry.path)
        
#Banking
for entry in os.scandir("C:/Users/Nusayer/Desktop/Malware/Banking"):
    try:    
        if entry.path.endswith(".apk") and entry.is_file():
            a = APK(entry.path)
            permission_list.append(process(a.get_permissions()))
            malware_count += 1         
    except:
        print(entry.path)
                
#SMS
for entry in os.scandir("C:/Users/Nusayer/Desktop/Malware/SMS"):
    try:    
        if entry.is_file():
            a = APK(entry.path)
            permission_list.append(process(a.get_permissions()))
            malware_count += 1      
    except:
        print(entry.path)


# In[3]:


#Benign Files
benign_count = 0
for entry in os.scandir("C:/Users/Nusayer/Apks/Benign"):
    try:    
        if entry.path.endswith(".apk") and entry.is_file():
            a = APK(entry.path)
            permission_list.append(process(a.get_permissions()))
            benign_count += 1        
    except:
        print(entry.path)


# In[4]:


#Unique permissions
allPermissions = set()
for i in permission_list:
    allPermissions = allPermissions.union(set(i))

allPermissions = list(allPermissions)

rowList = []
for i in range(len(permission_list)):
    x = []
    for j in range(len(allPermissions)):
        x.append(0)
    rowList.append(x)

for i in range(len(permission_list)):
    for j in permission_list[i]:
        x = allPermissions.index(j)
        if x > -1:
            rowList[i][x] = 1
            
#Adding labels
allPermissions.append('class')
for i in range(0, malware_count):
    rowList[i].append(1)
while(True):
    i += 1
    if i == len(rowList):
        break
    rowList[i].append(0)
    
rowList.insert(0, allPermissions)


# In[5]:


import csv

#Permission Dataset as csv file
with open('Permission Dataset.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerows(rowList)

#List of all unique permissions
with open('PermissionListForPrediction.txt', 'w') as f:
    f.writelines(str(allPermissions[:-1]))


# # Machine Learning

# In[29]:


import pandas as pd
df = pd.read_csv('Permission Dataset.csv')
df


# In[30]:


#Lets shuffle the dataframe
from sklearn.utils import shuffle
df = shuffle(df)
df


# In[9]:


df['class'].value_counts()


# ## Phase 1: Malware detection with only permission features

# In[10]:


X = df.drop('class', axis = 1)
y = df['class']

from sklearn.svm import SVC
from sklearn.model_selection import cross_validate

scoring = ['accuracy', 'precision_weighted', 'recall_weighted', 'f1_weighted']
scores = cross_validate(SVC(), X, y, scoring=scoring, cv=10)

average_accuracy = scores['test_accuracy'].mean()
average_precision_weighted = scores['test_precision_weighted'].mean()
average_recall_weighted = scores['test_recall_weighted'].mean()
average_f1_weighted = scores['test_f1_weighted'].mean()

print("Average Accuracy: ", average_accuracy)
print("Average Precision Weighted: ", average_precision_weighted)
print("Average Recall Weighted: ", average_recall_weighted)
print("Average f1 Weighted: ", average_f1_weighted)


# ## Phase 2: Comparing different machine learning algorithms

# In[14]:


import matplotlib.pyplot as plt
from sklearn import model_selection
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier


# prepare models
models = []
models.append(('LR', LogisticRegression()))
models.append(('DT', DecisionTreeClassifier()))
models.append(('RF', RandomForestClassifier()))
models.append(('SVM', SVC()))

# evaluate each model in turn
results = []
names = []
scoring = 'accuracy'
for name, model in models:
    kfold = model_selection.KFold(n_splits=10)
    cv_results = model_selection.cross_val_score(model, X, y, cv=kfold, scoring=scoring)
    results.append(cv_results)
    names.append(name)
    msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
    print(msg)

# boxplot algorithm comparison
fig = plt.figure()
fig.suptitle('Algorithm Comparison')
ax = fig.add_subplot(111)
plt.boxplot(results)
ax.set_xticklabels(names)
plt.show()


# ## Phase 3: Feature reduction or Permission pruning (First Pruning )

# In[31]:


#List of dangerous permissions
with open('dangerous_permission.txt') as f:
    lines = f.readlines()

dangerous_permission = []
for line in lines:
    dangerous_permission.append("permission." + line.strip())
dangerous_permission


# In[32]:


#Dropping all permissions except dangerous permissions
for col_name in df.columns:
    if(col_name not in dangerous_permission and col_name != 'class'):
        df = df.drop(columns=col_name)
df.head()


# In[17]:


X = df.drop('class', axis = 1)
y = df['class']

from sklearn.svm import SVC
from sklearn.model_selection import cross_validate

scoring = ['accuracy', 'precision_weighted', 'recall_weighted', 'f1_weighted']
scores = cross_validate(SVC(), X, y, scoring=scoring, cv=10)

average_accuracy = scores['test_accuracy'].mean()
average_precision_weighted = scores['test_precision_weighted'].mean()
average_recall_weighted = scores['test_recall_weighted'].mean()
average_f1_weighted = scores['test_f1_weighted'].mean()

print("Average Accuracy: ", average_accuracy)
print("Average Precision Weighted: ", average_precision_weighted)
print("Average Recall Weighted: ", average_recall_weighted)
print("Average f1 Weighted: ", average_f1_weighted)


# ## Phase 3: Second Pruning 

# In[33]:


#Creating two matrices: benign and malware
benign_matrix = df[df['class'] == 0].drop('class', axis = 1)
malware_matrix = df[df['class'] == 1].drop('class', axis = 1)

#Permission list
permissions = []
for column in df.loc[:, df.columns != 'class']:
    permissions.append(column)

#Permission dictionary with permission as key and significant score as value
permission_dic = {}
for i in permissions:
    permission_dic[i] = None
for column in df.loc[:, df.columns != 'class']:
    benign_to_malware_ratio = len(benign_matrix)/len(malware_matrix)
    num_of_ones_in_benign = benign_matrix[column].sum(axis = 0)
    num_of_ones_in_malware = malware_matrix[column].sum(axis = 0)
    permission_dic[column] = benign_to_malware_ratio * abs(num_of_ones_in_benign - num_of_ones_in_malware)
permission_dic


# In[34]:


#Sorting permission_dic based on significant score
permission_dic = sorted(permission_dic.items(), key=lambda x: x[1], reverse=False)
permission_dic


# In[35]:


#Dropping the less significant permission one by one to observe the effect on accuracy
from sklearn.svm import SVC
from sklearn.model_selection import cross_validate
count = 23
accuracy_list = []
accuracy_list.append(0.9477185545347927)
for i in permission_dic:
    df = df.drop(columns = i[0])
    X = df.drop('class', axis = 1)
    y = df['class']
    scoring = ['accuracy', 'precision_weighted', 'recall_weighted', 'f1_weighted']
    scores = cross_validate(SVC(), X, y, scoring=scoring, cv=10)
    
    average_accuracy = scores['test_accuracy'].mean()
    accuracy_list.append(average_accuracy)
    
    print(f"Average Accuracy with {count} permissions : ", average_accuracy)
    
    count -= 1


# In[38]:


accuracy_list.pop()
accuracy_list


# In[41]:


import numpy as np
import matplotlib.pyplot as plt
x = np.array(range(1, 24))
y = np.array(accuracy_list)

plt.xlabel("Number of less significant permission removed")
plt.ylabel("Accuracy")
plt.plot(x, y, color = "red", marker = "o")
plt.legend()
plt.show()


# In[ ]:




